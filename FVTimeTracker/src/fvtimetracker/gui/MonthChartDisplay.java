/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fvtimetracker.gui;

import fvtimetracker.data.Datastore;
import java.awt.BorderLayout;
import java.awt.LayoutManager;
import java.text.NumberFormat;
import java.util.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.*;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.*;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.util.SortOrder;

/**
 *
 * @author lachlan
 */
public class MonthChartDisplay extends javax.swing.JPanel {

	private Datastore datastore;
	private NumberFormat hourFormat;
	private boolean layoutAlreadySet;
	private DefaultPieDataset dataset;

	public MonthChartDisplay() {
		this(null);
	}

	public MonthChartDisplay(Datastore datastore) {
		this.datastore = datastore;
		hourFormat = NumberFormat.getNumberInstance();
		hourFormat.setMinimumFractionDigits(2);
		hourFormat.setMaximumFractionDigits(2);

		initComponents();


		dataset = new DefaultKeyedValuesDataset();
		JFreeChart chart = ChartFactory.createPieChart("Month Task Pie", dataset,
				true, true, false);
		ChartPanel chartDraw = new ChartPanel(chart, true);

		chartPnl.add(chartDraw, BorderLayout.CENTER);

		limitStartSpnr.setEditor(new JSpinner.DateEditor(limitStartSpnr,
				"MMM yyyy"));
	}

	public void reset() {
		Calendar startOfMonth = Calendar.getInstance();
		startOfMonth.set(Calendar.MILLISECOND, 0);
		startOfMonth.set(Calendar.SECOND, 0);
		startOfMonth.set(Calendar.MINUTE, 0);
		startOfMonth.set(Calendar.HOUR, 0);
		startOfMonth.set(Calendar.DAY_OF_MONTH, 1);

		((SpinnerDateModel) limitStartSpnr.getModel()).setValue(startOfMonth.
				getTime());
	}

	@Override
	public void setLayout(LayoutManager mgr) {
		if (layoutAlreadySet) {
			return;
		}
		layoutAlreadySet = mgr instanceof GroupLayout;
		super.setLayout(mgr);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        limitStartSpnr = new javax.swing.JSpinner();
        chartPnl = new javax.swing.JPanel();

        jLabel2.setText("Month");

        limitStartSpnr.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, new java.util.Date(), java.util.Calendar.DAY_OF_MONTH));
        limitStartSpnr.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                limitStartSpnrStateChanged(evt);
            }
        });

        chartPnl.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(limitStartSpnr, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE))
            .addComponent(chartPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(chartPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(limitStartSpnr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void limitStartSpnrStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_limitStartSpnrStateChanged
		updateState();
	}//GEN-LAST:event_limitStartSpnrStateChanged

	public void updateState() {
		long start, end;
		start = ((SpinnerDateModel) limitStartSpnr.getModel()).getDate().getTime();

		Calendar endDate = Calendar.getInstance();
		endDate.setTime(((SpinnerDateModel) limitStartSpnr.getModel()).getDate());
		endDate.add(Calendar.MONTH, 1);

		end = endDate.getTimeInMillis();

		List<String[]> tasks = datastore.getTasksTimes(
				start, end);

		dataset.clear();

		if (tasks != null) {
			for (String[] taskTime : tasks) {
				int mins = Integer.parseInt(taskTime[1]);
				float hours = mins / 60f;
				taskTime[1] = hourFormat.format(hours) + "h";

				dataset.setValue(taskTime[0], mins/60f);
			}
		}

		dataset.sortByValues(SortOrder.ASCENDING);
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chartPnl;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSpinner limitStartSpnr;
    // End of variables declaration//GEN-END:variables
}
