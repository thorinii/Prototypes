/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fvtimetracker.gui;

import fvtimetracker.Main;
import fvtimetracker.logic.ApplicationManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Calendar;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.*;

/**
 *
 * @author lachlan
 */
public class TaskPopup extends javax.swing.JFrame {

	private static final int MAX_TASKS = 4;
	private ApplicationManager applicationManager;
	private JButton[] buttons;
	private Timer popupMinuteTimer;

	public TaskPopup(ApplicationManager applicationManager) {
		initComponents();

		this.applicationManager = applicationManager;
		this.popupMinuteTimer = new Timer(60000, new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				int mins = (int) (TaskPopup.this.applicationManager.
						getTimeStopWatch().getTime() / 1000 / 60);
				timeLbl.setText(mins + " minutes");
			}

		});

		this.buttons = new JButton[MAX_TASKS];
		buttonPnl.removeAll();
		for (int i = 0; i < MAX_TASKS; i++) {
			JButton button = new JButton();
			button.setEnabled(false);
			button.setText("N/A");
			button.addActionListener(new ButtonHandler());

			buttons[i] = button;
			buttonPnl.add(button);
		}

		pack();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        containerOrderFocusTraversalPolicy1 = new java.awt.ContainerOrderFocusTraversalPolicy();
        jPanel2 = new javax.swing.JPanel();
        timeLbl = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        buttonPnl = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        createTaskPnl = new javax.swing.JPanel();
        createNewBtn = new javax.swing.JButton();
        selectTaskCmbo = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("FV Time Tracker - Record Time");
        setFocusTraversalPolicy(containerOrderFocusTraversalPolicy1);
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        timeLbl.setText("jLabel1");

        jLabel1.setText("Record Time:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeLbl)
                    .addComponent(jLabel1))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel2, gridBagConstraints);

        buttonPnl.setLayout(new java.awt.GridLayout(4, 0, 5, 5));

        jButton1.setText("placeholder");
        buttonPnl.add(jButton1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(buttonPnl, gridBagConstraints);

        createTaskPnl.setLayout(new java.awt.GridBagLayout());

        createNewBtn.setText("Use");
        createNewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        createTaskPnl.add(createNewBtn, gridBagConstraints);

        selectTaskCmbo.setEditable(true);
        selectTaskCmbo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        createTaskPnl.add(selectTaskCmbo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(createTaskPnl, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void createNewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewBtnActionPerformed
		applicationManager.submitTask((String) selectTaskCmbo.getSelectedItem());

		setVisible(false);
	}//GEN-LAST:event_createNewBtnActionPerformed

	public void showPopup() {
		if (isVisible()) {
			return;
		}

		setAlwaysOnTop(applicationManager.getAlwaysOnTop());

		// Get Latest Tasks
		collectTasks();
		selectTaskCmbo.setSelectedIndex(0);

		// Setup live time feedback
		timeLbl.setText(
				(applicationManager.getTimeStopWatch().getTime() / 1000 / 60)
				+ " minutes");

		popupMinuteTimer.start();

		setVisible(true);
		pack();
	}

	@Override
	public void setVisible(boolean b) {
		if (b == true) {
			setLocation(Main.PREF_ROOT.getInt("taskpopup-x", 0), Main.PREF_ROOT.
					getInt("taskpopup-y", 0));
		} else {
			Main.PREF_ROOT.putInt("taskpopup-x", getX());
			Main.PREF_ROOT.putInt("taskpopup-y", getY());
		}

		super.setVisible(b);
	}

	private void collectTasks() {
		List<String> tasks = applicationManager.getDatabase().
				getTasksOrderByRecent();
		List<String> alphaTasks = new ArrayList<String>(tasks);
		Collections.sort(alphaTasks);

		DefaultComboBoxModel<String> selectTaskList = new DefaultComboBoxModel<>();
		selectTaskList.addElement("");

		int i = 0;
		for (String task : tasks) {
			if (i < MAX_TASKS) {
				buttons[i].setText(task);
				buttons[i].setActionCommand(task);
				buttons[i].setEnabled(true);
			}

			i++;
		}

		for(String task : alphaTasks){
			selectTaskList.addElement(task);
		}

		for (; i < MAX_TASKS; i++) {
			buttons[i].setText("N/A");
			buttons[i].setEnabled(false);
		}
		
		buttons[0].requestFocusInWindow();

		selectTaskCmbo.setModel(selectTaskList);
	}

	private class ButtonHandler implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			applicationManager.submitTask(e.getActionCommand());

			setVisible(false);
		}

	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPnl;
    private java.awt.ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy1;
    private javax.swing.JButton createNewBtn;
    private javax.swing.JPanel createTaskPnl;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox selectTaskCmbo;
    private javax.swing.JLabel timeLbl;
    // End of variables declaration//GEN-END:variables
}
