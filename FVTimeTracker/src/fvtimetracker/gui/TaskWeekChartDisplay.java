/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fvtimetracker.gui;

import fvtimetracker.data.Datastore;
import java.awt.*;
import java.awt.geom.Ellipse2D;
import java.text.*;
import java.util.*;
import javax.swing.*;
import org.jfree.chart.*;
import org.jfree.chart.axis.MonthDateFormat;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.util.SortOrder;

/**
 *
 * @author lachlan
 */
public class TaskWeekChartDisplay extends javax.swing.JPanel {

	private Datastore datastore;
	private NumberFormat hourFormat;
	private DateFormat dateFormat;
	private boolean layoutAlreadySet;
	private DefaultCategoryDataset dataset;

	public TaskWeekChartDisplay() {
		this(null);
	}

	public TaskWeekChartDisplay(Datastore datastore) {
		this.datastore = datastore;

		hourFormat = NumberFormat.getNumberInstance();
		hourFormat.setMinimumFractionDigits(2);
		hourFormat.setMaximumFractionDigits(2);

		dateFormat = new SimpleDateFormat("dd MMM");

		initComponents();


		dataset = new DefaultCategoryDataset();
		JFreeChart chart = ChartFactory.createLineChart("Weekly Hours per Task",
				"Start of Week", "Hours", dataset,
				PlotOrientation.VERTICAL, true, true, false);
		setupChart(chart);

		ChartPanel chartDraw = new ChartPanel(chart, true);

		chartPnl.add(chartDraw, BorderLayout.CENTER);
	}

	private void setupChart(JFreeChart chart) {
		LineAndShapeRenderer renderer = (LineAndShapeRenderer) ((CategoryPlot) chart.
				getPlot()).getRenderer();

		renderer.setBaseShapesVisible(true);
		renderer.setDrawOutlines(true);
		renderer.setUseFillPaint(true);
		renderer.setBaseFillPaint(Color.white);
		renderer.setSeriesStroke(0, new BasicStroke(3.0F));
		renderer.setSeriesOutlineStroke(0, new BasicStroke(2.0F));
		renderer.setSeriesShape(0, new Ellipse2D.Double(-5.0D, -5.0D, 10.0D,
				10.0D));
	}

	public void reset() {
		DefaultComboBoxModel<String> tasksModel = new DefaultComboBoxModel<>();
		
		for(String task : datastore.getTasks()){
			tasksModel.addElement(task);
		}
		
		taskCmbo.setModel(tasksModel);
	}

	@Override
	public void setLayout(LayoutManager mgr) {
		if (layoutAlreadySet) {
			return;
		}
		layoutAlreadySet = mgr instanceof GroupLayout;
		super.setLayout(mgr);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        chartPnl = new javax.swing.JPanel();
        taskCmbo = new javax.swing.JComboBox();

        jLabel2.setText("Task");

        chartPnl.setLayout(new java.awt.BorderLayout());

        taskCmbo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        taskCmbo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                taskCmboItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(taskCmbo, 0, 338, Short.MAX_VALUE))
            .addComponent(chartPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(chartPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(taskCmbo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void taskCmboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_taskCmboItemStateChanged
		updateState();
	}//GEN-LAST:event_taskCmboItemStateChanged

	public void updateState() {
		String task = (String)taskCmbo.getSelectedItem();
		Map<Long, Integer> info = datastore.getTaskWeekInfo(task, 7);

		dataset.clear();

		if (info != null) {
			for (Map.Entry<Long, Integer> datum : info.entrySet()) {
				int mins = datum.getValue();
				String hours = hourFormat.format(mins / 60f) + "h";
				String date = dateFormat.format(new Date(datum.getKey()));

				dataset.addValue(mins, "Hours for " + task, date);
			}
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chartPnl;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox taskCmbo;
    // End of variables declaration//GEN-END:variables
}
