/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Oct 25, 2011, 7:51:43 PM
 */
package ggnlcoder;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.*;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author Lachlan
 */
public class MainFrame extends javax.swing.JFrame {

	/**
	 * Creates new form MainFrame
	 */
	public MainFrame() {
		initComponents();
		productsData = new ProductsData();

		categoryList.setCellRenderer(new HighlightListCellRenderer());

		productHighlightRenderer = new HighlightListCellRenderer();
		productsList.setCellRenderer(productHighlightRenderer);

		templateCmbBox.setModel(new DefaultComboBoxModel<String>(findTemplates()));
		templateCmbBox.setSelectedItem("Default");

		backgroundExecutor = Executors.newSingleThreadExecutor();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        productsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        categoryList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        productsList = new javax.swing.JList();
        categoryAddBtn = new javax.swing.JButton();
        categoryRemoveBtn = new javax.swing.JButton();
        productEditBtn = new javax.swing.JButton();
        productRemoveBtn = new javax.swing.JButton();
        productRemoveAllBtn = new javax.swing.JButton();
        bulkAddBtn = new javax.swing.JButton();
        generatorPanel = new javax.swing.JPanel();
        generateBtn = new javax.swing.JButton();
        generationProgressBar = new javax.swing.JProgressBar();
        copyGeneratedBtn = new javax.swing.JButton();
        templateCmbBox = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        processingPriceScaleTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        processingPriceShiftTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GG Newsletter Coder");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        productsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Products"));
        productsPanel.setName("productsPanel"); // NOI18N
        productsPanel.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        categoryList.setModel(new DefaultListModel());
        categoryList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        categoryList.setName("categoryList"); // NOI18N
        categoryList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                categoryListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(categoryList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.weighty = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        productsPanel.add(jScrollPane1, gridBagConstraints);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        productsList.setModel(new DefaultListModel());
        productsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        productsList.setName("productsList"); // NOI18N
        productsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productsListMouseClicked(evt);
            }
        });
        productsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                productsListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(productsList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.weighty = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        productsPanel.add(jScrollPane2, gridBagConstraints);

        categoryAddBtn.setText("Add Categories");
        categoryAddBtn.setName("categoryAddBtn"); // NOI18N
        categoryAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryAddBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_START;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        productsPanel.add(categoryAddBtn, gridBagConstraints);

        categoryRemoveBtn.setText("Remove Category");
        categoryRemoveBtn.setEnabled(false);
        categoryRemoveBtn.setName("categoryRemoveBtn"); // NOI18N
        categoryRemoveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryRemoveBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        productsPanel.add(categoryRemoveBtn, gridBagConstraints);

        productEditBtn.setText("Edit Product");
        productEditBtn.setEnabled(false);
        productEditBtn.setName("productEditBtn"); // NOI18N
        productEditBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productEditBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        productsPanel.add(productEditBtn, gridBagConstraints);

        productRemoveBtn.setText("Remove Product");
        productRemoveBtn.setEnabled(false);
        productRemoveBtn.setName("productRemoveBtn"); // NOI18N
        productRemoveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productRemoveBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        productsPanel.add(productRemoveBtn, gridBagConstraints);

        productRemoveAllBtn.setText("Remove All Products");
        productRemoveAllBtn.setName("productRemoveAllBtn"); // NOI18N
        productRemoveAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productRemoveAllBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        productsPanel.add(productRemoveAllBtn, gridBagConstraints);

        bulkAddBtn.setText("Add Products");
        bulkAddBtn.setEnabled(false);
        bulkAddBtn.setName("bulkAddBtn"); // NOI18N
        bulkAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bulkAddBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        productsPanel.add(bulkAddBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.weighty = 100.0;
        getContentPane().add(productsPanel, gridBagConstraints);

        generatorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Generator"));
        generatorPanel.setName("generatorPanel"); // NOI18N
        generatorPanel.setLayout(new java.awt.GridBagLayout());

        generateBtn.setText("Generate");
        generateBtn.setName("generateBtn"); // NOI18N
        generateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        generatorPanel.add(generateBtn, gridBagConstraints);

        generationProgressBar.setName("generationProgressBar"); // NOI18N
        generationProgressBar.setString("Not Generating");
        generationProgressBar.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        generatorPanel.add(generationProgressBar, gridBagConstraints);

        copyGeneratedBtn.setText("Copy Generated To Clipboard");
        copyGeneratedBtn.setEnabled(false);
        copyGeneratedBtn.setName("copyGeneratedBtn"); // NOI18N
        copyGeneratedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyGeneratedBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        generatorPanel.add(copyGeneratedBtn, gridBagConstraints);

        templateCmbBox.setName("templateCmbBox");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        generatorPanel.add(templateCmbBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 100.0;
        getContentPane().add(generatorPanel, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Processing"));
        jPanel1.setName("jPanel1");
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Price Multiply:");
        jLabel1.setName("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jLabel1, gridBagConstraints);

        processingPriceScaleTxt.setText("1.1");
        processingPriceScaleTxt.setName("processingPriceScaleTxt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(processingPriceScaleTxt, gridBagConstraints);

        jLabel2.setText("Price Shift:");
        jLabel2.setName("jLabel2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jLabel2, gridBagConstraints);

        processingPriceShiftTxt.setText("0.0");
        processingPriceShiftTxt.setName("processingPriceShiftTxt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(processingPriceShiftTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 100.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void categoryAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryAddBtnActionPerformed
		int index = categoryList.getSelectedIndex();
		while (true) {
			String categoryName = JOptionPane.showInputDialog(categoryList,
					"Specify the new category name", "GG Newsletter Coder",
					JOptionPane.QUESTION_MESSAGE);
			if (categoryName == null) {
				break;
			}

			categoryName = categoryName.trim();

			if (categoryName.equals("")) {
				break;
			}

			addCategory(categoryName);
		}
		categoryList.setSelectedIndex(Math.max(0, Math.min(index + 1, categoryList.getModel().getSize() - 1)));
    }//GEN-LAST:event_categoryAddBtnActionPerformed

    private void categoryRemoveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryRemoveBtnActionPerformed
		if (categoryList.getSelectedIndex() == -1) {
			return;
		}

		int index = categoryList.getSelectedIndex() - 1;

		String category = (String) categoryList.getSelectedValue();
		removeCategory(category);

		categoryList.setSelectedIndex(Math.max(0, Math.min(index, categoryList.getModel().getSize() - 1)));
    }//GEN-LAST:event_categoryRemoveBtnActionPerformed

    private void productEditBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productEditBtnActionPerformed
		if (productsList.getSelectedIndex() == -1) {
			return;
		}

		int index = productsList.getSelectedIndex() - 1;
		String oldProductCode = (String) productsList.getSelectedValue();

		String newProductCode = JOptionPane.showInputDialog(categoryList,
				"Edit " + oldProductCode, "GG Newsletter Coder",
				JOptionPane.QUESTION_MESSAGE);

		if (newProductCode == null) {
			return;
		}
		newProductCode = newProductCode.toUpperCase().trim();
		if (newProductCode.equals("")) {
			return;
		}

		editProduct(oldProductCode, newProductCode);
    }//GEN-LAST:event_productEditBtnActionPerformed

    private void productRemoveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productRemoveBtnActionPerformed
		if (productsList.getSelectedIndex() == -1) {
			return;
		}

		int index = productsList.getSelectedIndex() - 1;

		String product = (String) productsList.getSelectedValue();
		removeProduct(product);

		productsList.setSelectedIndex(Math.max(0, Math.min(index, productsList.getModel().getSize() - 1)));
    }//GEN-LAST:event_productRemoveBtnActionPerformed

    private void productRemoveAllBtnActionPerformed(//GEN-FIRST:event_productRemoveAllBtnActionPerformed
	    java.awt.event.ActionEvent evt) {//GEN-HEADEREND:event_productRemoveAllBtnActionPerformed
		for (String cat : productsData.getProducts().keySet()) {
			List<String> productsForCategory =
					new ArrayList<String>(productsData.getProducts().get(cat));
			for (String product : productsForCategory) {
				if (cat.equals((String) categoryList.getSelectedValue())) {
					removeProduct(product);
				} else {
					productsData.removeProduct(cat, product);
				}
			}
		}
    }//GEN-LAST:event_productRemoveAllBtnActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
//	String categories = "";
//	for (String category : productsData.getCategories()) {
//	    categories += category + ";";
//	}
//
//	Preferences prefs = Preferences.systemNodeForPackage(MainFrame.class);
//	prefs.put("categories", categories);
//
//	try {
//	    prefs.flush();
//	} catch (BackingStoreException ex) {
//	    ex.printStackTrace();
//	}
    }//GEN-LAST:event_formWindowClosing

    private void categoryListValueChanged(//GEN-FIRST:event_categoryListValueChanged
	    javax.swing.event.ListSelectionEvent evt) {//GEN-HEADEREND:event_categoryListValueChanged
		if (evt.getValueIsAdjusting()) {
			return;
		}
		if (categoryList.getSelectedIndex() == -1) {
			categoryRemoveBtn.setEnabled(false);
			bulkAddBtn.setEnabled(false);
			productEditBtn.setEnabled(false);
			productRemoveBtn.setEnabled(false);
			return;
		}

		categoryRemoveBtn.setEnabled(true);
		bulkAddBtn.setEnabled(true);
		productEditBtn.setEnabled(false);
		productRemoveBtn.setEnabled(false);

		String category = (String) categoryList.getSelectedValue();

		List<String> products = productsData.getProducts().get(category);

		((DefaultListModel) productsList.getModel()).clear();

		for (String product : products) {
			((DefaultListModel) productsList.getModel()).addElement(
					product);
		}
		productsList.clearSelection();
    }//GEN-LAST:event_categoryListValueChanged

    private void generateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateBtnActionPerformed
		try {
			if (productRequester == null) {
				productRequester = new ProductRequester();
			}
		} catch (IOException ex) {
			Logger.getLogger(this.getClass().getName()).
					log(Level.WARNING, "Could not load Volusion Props", ex);

			JOptionPane.showMessageDialog(this, "Could not load Volusion properties",
					"GG Newsletter Coder", JOptionPane.ERROR_MESSAGE);
		}

		Processor processor = new Processor();

		try {
			processor.setPriceScale(Double.parseDouble(processingPriceScaleTxt.getText()));
			processor.setPriceShift(Double.parseDouble(processingPriceShiftTxt.getText()));
		} catch (NumberFormatException nfe) {
			processingPriceScaleTxt.setText("1.1");
			processingPriceShiftTxt.setText("0.0");
		}

		String template = (String) templateCmbBox.getSelectedItem();
		if (template == null || template.trim().equals("")) {
			template = "Default";
		}

		copyGeneratedBtn.setEnabled(false);
		generateBtn.setEnabled(false);
		gw = new GeneratorWorker(productRequester, processor, "./templates/" + template);
		gw.setUpdateRunnable(new Runnable() {

			@Override
			public void run() {
				switch (gw.getCurrentStage()) {
					case Downloading:
						generationProgressBar.setString(
								"Downloading Product Data");
						break;
					case Coding:
						generationProgressBar.setString("Coding Newsletter");
						break;
					default:
						generationProgressBar.setString("Not Generating");
				}
				generationProgressBar.setValue(gw.getProgress());

				if (gw.getCurrentStage()
						== GeneratorWorker.GenerationStage.NoWork && gw.getProgress() == 100) {
					copyGeneratedBtn.setEnabled(true);
					generateBtn.setEnabled(true);
				}
			}

		});
		gw.runGeneration(productsData.getProducts());
    }//GEN-LAST:event_generateBtnActionPerformed

    private void productsListValueChanged(//GEN-FIRST:event_productsListValueChanged
	    javax.swing.event.ListSelectionEvent evt) {//GEN-HEADEREND:event_productsListValueChanged
		if (evt.getValueIsAdjusting()) {
			return;
		}
		if (productsList.getSelectedIndex() == -1) {
			productRemoveBtn.setEnabled(false);
			productEditBtn.setEnabled(false);
			return;
		}

		productRemoveBtn.setEnabled(true);
		productEditBtn.setEnabled(true);
    }//GEN-LAST:event_productsListValueChanged

    private void bulkAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bulkAddBtnActionPerformed
		while (true) {
			String productCode = JOptionPane.showInputDialog(categoryList,
					"Specify the product code", "GG Newsletter Coder",
					JOptionPane.QUESTION_MESSAGE);
			if (productCode == null) {
				return;
			}

			productCode = productCode.toUpperCase().trim();

			if (productCode.equals("")) {
				break;
			}

			addProduct(productCode);
		}
    }//GEN-LAST:event_bulkAddBtnActionPerformed

    private void copyGeneratedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyGeneratedBtnActionPerformed
		String newsletter = gw.getNewsletter();

		StringSelection clipboardString = new StringSelection(newsletter);
		Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
		clipboard.setContents(clipboardString, clipboardString);
    }//GEN-LAST:event_copyGeneratedBtnActionPerformed

    private void productsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productsListMouseClicked
		if (evt.getClickCount() == 2) {
		}
    }//GEN-LAST:event_productsListMouseClicked

	public void addCategory(String name) {
		if (productsData.addCategory(name)) {
			((DefaultListModel) categoryList.getModel()).addElement(name);
			categoryList.setSelectedValue(name, true);
		}
	}

	private void removeCategory(String category) {
		productsData.removeCategory(category);
		((DefaultListModel) categoryList.getModel()).removeElement(
				category);
	}

	public void addProduct(final String code) {
		if (productsData.addProduct((String) categoryList.getSelectedValue(),
				code)) {
			((DefaultListModel) productsList.getModel()).addElement(code);
			productsList.setSelectedValue(code, true);
		}

		backgroundExecutor.submit(new Runnable() {

			@Override
			public void run() {
				try {
					validateProduct(code);
				} catch (IOException ex) {
					Logger.getLogger(this.getClass().getName()).
							log(Level.WARNING, "Error validating product", ex);
				}
			}

		});
	}

	public void editProduct(String oldCode, final String newCode) {
		productsData.editProduct((String) categoryList.getSelectedValue(),
				oldCode, newCode);
		int listIndex =
				((DefaultListModel) productsList.getModel()).indexOf(oldCode);
		((DefaultListModel) productsList.getModel()).set(listIndex, newCode);
		productsList.setSelectedValue(newCode, true);

		backgroundExecutor.submit(new Runnable() {

			@Override
			public void run() {
				try {
					validateProduct(newCode);
				} catch (IOException ex) {
					Logger.getLogger(this.getClass().getName()).
							log(Level.WARNING, "Error validating product", ex);
				}
			}

		});
	}

	public void removeProduct(String code) {
		productsData.removeProduct((String) categoryList.getSelectedValue(),
				code);
		((DefaultListModel) productsList.getModel()).removeElement(
				code);
	}

	public boolean validateProduct(String code) throws IOException {
		if (productRequester == null) {
			productRequester = new ProductRequester();
		}

		try {
			productRequester.getProduct(code);
		} catch (ProductNotFoundException pnfe) {
			Logger.getLogger(this.getClass().getName()).
					log(Level.WARNING, "Could not find Product", pnfe);

			productHighlightRenderer.setHighlighted(code, true);
			productsList.repaint();
			return false;
		}

		productHighlightRenderer.setHighlighted(code, false);
		productsList.repaint();

		return true;
	}

	public void copyGeneratedNewsletter() {
		String newsletter = gw.getNewsletter();

		StringSelection clipboardString = new StringSelection(newsletter);
		Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
		clipboard.setContents(clipboardString, clipboardString);
	}

	private String[] findTemplates() {
		File templatesDir = new File("./templates/");
		String[] templates = templatesDir.list(new FilenameFilter() {

			@Override
			public boolean accept(File dir, String file) {
				if (!file.startsWith(".")) {
					return true;
				}
				return false;
			}

		});

		Arrays.sort(templates);

		return templates;
	}

	private ExecutorService backgroundExecutor;
	private HighlightListCellRenderer productHighlightRenderer;
	private GeneratorWorker gw;
	private ProductsData productsData;
	private ProductRequester productRequester;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bulkAddBtn;
    private javax.swing.JButton categoryAddBtn;
    private javax.swing.JList categoryList;
    private javax.swing.JButton categoryRemoveBtn;
    private javax.swing.JButton copyGeneratedBtn;
    private javax.swing.JButton generateBtn;
    private javax.swing.JProgressBar generationProgressBar;
    private javax.swing.JPanel generatorPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField processingPriceScaleTxt;
    private javax.swing.JTextField processingPriceShiftTxt;
    private javax.swing.JButton productEditBtn;
    private javax.swing.JButton productRemoveAllBtn;
    private javax.swing.JButton productRemoveBtn;
    private javax.swing.JList productsList;
    private javax.swing.JPanel productsPanel;
    private javax.swing.JComboBox templateCmbBox;
    // End of variables declaration//GEN-END:variables
}
